/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ..\..\public\game_boy_color.glb -t 
Author: Yandrack (https://sketchfab.com/Yandrack)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/game-boy-color-a37767a737224925a9e4afea7a2b0336
Title: Game Boy COLOR
*/

import * as THREE from "three";
import { useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import url from "./videos/crystal.mp4";
import { forwardRef } from "react";

var texLoader = new THREE.TextureLoader();
var newTexture = texLoader.load("./crystal.jpg");

type GLTFResult = GLTF & {
  nodes: {
    defaultMaterial: THREE.Mesh;
    defaultMaterial_1: THREE.Mesh;
  };
  materials: {
    ["03___Default"]: THREE.MeshStandardMaterial;
    ["02___Default"]: THREE.MeshStandardMaterial;
  };
};

export const Gameboy = forwardRef(function Model(
  props: JSX.IntrinsicElements["group"],
  ref: any
) {
  const { nodes, materials } = useGLTF("/game_boy_color.glb") as GLTFResult;
  const [hovered, setHovered] = useState(false);
  const [showVideo, setShowVideo] = useState<boolean>(false);

  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.src = url;
    vid.crossOrigin = "Anonymous";
    vid.loop = false;
    vid.muted = false;
    vid.onended = () => setShowVideo(false);
    return vid;
  });

  return (
    <group
      {...props}
      dispose={null}
      rotation={[0, 0, 0]}
      position={[0.7, 0, 0.3]}
      ref={ref}
    >
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.defaultMaterial.geometry}
          material={materials["03___Default"]}
          onClick={() => {
            if (!showVideo) {
              setShowVideo(true);
              video.play();
            } else {
              if (video.paused) {
                video.play();
              } else {
                video.pause();
              }
            }
          }}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
        >
          {!showVideo && <meshStandardMaterial map={newTexture} />}
          {showVideo && (
            <meshStandardMaterial>
              <videoTexture attach="map" args={[video]} />
            </meshStandardMaterial>
          )}
        </mesh>
        <mesh
          geometry={nodes.defaultMaterial_1.geometry}
          material={materials["02___Default"]}
        />
      </group>
    </group>
  );
});

useGLTF.preload("/game_boy_color.glb");
